@page "/addPerson"

@using AppDomain.Model;
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http

<style type="text/css">
    #allforms {
        background-color: #f5f8fa;
        border: 1px solid #bbbbbf;
        border-radius: 15px;
        width: 1100px;
        height: auto;
        float: left;
    }

    #edit_form {
        width: 1100px;
        float: left;
    }

    #element {
        padding: 15px;
        float: left;
    }

    #result {
        background-color: #f2f5f7;
        border: 1px solid #bbbbbf;
        border-radius: 15px;
        float: right;
        margin-right: 30px;
        width: 450px;
        padding-right: 10px;
        padding-left: 10px;
    }

    #btnSubmit {
        margin: 15px
    }
</style>

<div id="allforms">
    <div id="edit_form">
        <div id="element">
            <EditForm Model="@info">
                <p>
                    <b>Контактные данные*</b>
                </p>
                <p>
                    Имя:<br />
                    <InputText id="name" @bind-Value="info.Name" class="form-control" />
                </p>
                <p>
                    Пол:<br />
                    <InputText id="gender" @bind-Value="info.Gender" class="form-control" />
                </p>
                <p>
                    Номер телефона:<br />
                    <InputText id="phone" @bind-Value="info.Phone" class="form-control" />
                </p>
                <p>
                    E-mail:<br />
                    <InputText id="email" @bind-Value="info.Email" class="form-control" />
                </p>

            </EditForm>
        </div>
        <div id="element">
            <EditForm Model="@education" OnSubmit="Submit2">
                <p>
                    <b>Образование*</b>
                </p>
                <p>
                    Тип образования:<br />
                    <InputText id="type" @bind-Value="education.Type" class="form-control" />
                </p>
                <p>
                    Учебное учреждение:<br />
                    <InputText id="number" @bind-Value="education.Institution" class="form-control" />
                </p>
                <p>
                    Дата получения:<br />
                    <InputDate id="number" @bind-Value="education.Date" class="form-control" />
                </p>
                <button type="submit" class="btn btn-primary btn-sm">Submit</button>
                <button type="button" class="btn btn-secondary btn-sm"
                @onclick="AddEducation">
                    Добавить еще
                </button>
            </EditForm>
        </div>
        <div id="element">
            <EditForm Model="@job" OnSubmit="Submit3">
                <p>
                    <b>Опыт работы*</b>
                </p>
                <p>
                    Должность:<br />
                    <InputText id="position" @bind-Value="job.Position" class="form-control" />
                </p>
                <p>
                    Организация:<br />
                    <InputText id="organization" @bind-Value="job.Organization" class="form-control" />
                </p>
                <button type="submit" class="btn btn-primary btn-sm">Submit</button>
                <button type="button" class="btn btn-secondary btn-sm"
                @onclick="AddJob">
                    Добавить еще
                </button>
            </EditForm>
        </div>
        <div id="element">
            <EditForm Model="@address">
                <p>
                    <b>Адрес*</b>
                </p>
                <p>
                    Адрес постоянной регистрации:<br />
                    <InputText id="permanentRegistration" @bind-Value="address.AddressPermanentRegistration"
                               class="form-control" />
                </p>
                <p>
                    Адрес временной регистрации:<br />
                    <InputText id="tempRegistration" @bind-Value="address.AddressTemporaryRegistration"
                               class="form-control" />
                </p>
            </EditForm>
        </div>
    </div>
    <div id="edit_form">
        <div id="element">
            <EditForm Model="@document" OnSubmit="Submit5">
                <p>
                    <b>Документы*</b>
                </p>
                <p>
                    Название документа:<br />
                    <InputText id="name" @bind-Value="document.DocumentName" class="form-control" />
                </p>
                <p>
                    Номер документа:<br />
                    <InputText id="number" @bind-Value="document.DocumentNumber" class="form-control" />
                </p>
                <button type="submit" class="btn btn-primary btn-sm">Submit</button>
                <button type="button" class="btn btn-secondary btn-sm"
                @onclick="AddDocument">
                    Добавить еще
                </button>
            </EditForm>
        </div>
        <div id="element">
            <EditForm Model="@rusPassport">
                <p>
                    <b>Паспорт гражданина РФ</b>
                </p>
                <p>
                    Серия Номер:<br />
                    <InputText id="permanentRegistration" @bind-Value="rusPassport.DocumentSeries" class="form-control" />
                </p>
                <p>
                    Выдан:<br />
                    <InputText id="tempRegistration" @bind-Value="rusPassport.DocumentIssuer" class="form-control" />
                </p>
                <p>
                    Код подразделения:<br />
                    <InputText id="tempRegistration" @bind-Value="rusPassport.DocumentIssuerCode" class="form-control" />
                </p>
                <p>
                    Дата выдачи:<br />
                    <InputDate id="number" @bind-Value="rusPassport.DocumentDate" class="form-control" />
                </p>
            </EditForm>
        </div>
        <div id="element">
            <EditForm Model="@foreignPassport">
                <p>
                    <b>Паспорт иностранного гражданина</b>
                </p>
                <p>
                    Серия Номер:<br />
                    <InputText id="permanentRegistration" @bind-Value="foreignPassport.DocumentSeries" class="form-control" />
                </p>
                <p>
                    Страна:<br />
                    <InputText id="tempRegistration" @bind-Value="foreignPassport.DocumentCountry" class="form-control" />
                </p>
                <p>
                    Дата выдачи:<br />
                    <InputDate id="number" @bind-Value="foreignPassport.DocumentDate" class="form-control" />
                </p>
            </EditForm>
        </div>
        <div id="element">
            <EditForm Model="@intPassport">
                <p>
                    <b>Загранпаспорт</b>
                </p>
                <p>
                    Серия Номер:<br />
                    <InputText id="permanentRegistration" @bind-Value="intPassport.DocumentSeries" class="form-control" />
                </p>
                <p>
                    Выдан:<br />
                    <InputText id="tempRegistration" @bind-Value="intPassport.DocumentIssuer" class="form-control" />
                </p>
                <p>
                    Дата выдачи:<br />
                    <InputDate id="tempRegistration" @bind-Value="intPassport.DocumentDateOfIssue" class="form-control" />
                </p>
                <p>
                    Дата окончания срока:<br />
                    <InputDate id="number" @bind-Value="intPassport.DocumentExpirationDate" class="form-control" />
                </p>
            </EditForm>
        </div>
    </div>
    <button type="button" id="btnSubmit" class="btn btn-outline-success" @onclick="submitAll">Подтвердить</button>
    <div style="color:red;" float="left">@message</div>

</div>
<div id="result">
    <table class="table">
        <thead>
            <tr align="center">
                <th colspan="2">Результат</th>
            </tr>
        </thead>
        <thead>
            <tr>
                <th colspan="2">Контактные данные</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td> Ф.И.О </td>
                <td>@info.Name</td>
            </tr>
            <tr>
                <td> Пол </td>
                <td>@info.Gender</td>
            </tr>
            <tr>
                <td> Номер телефона </td>
                <td>@info.Phone</td>
            </tr>
            <tr>
                <td> E-mail </td>
                <td>@info.Email</td>
            </tr>
        </tbody>
        <thead>
            <tr>
                <th colspan="2">Образование</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var education in listEducation)
            {
                <tr>
                    <td> Тип образования </td>
                    <td>@education.Type</td>
                </tr>
                <tr>
                    <td> Организация </td>
                    <td>@education.Institution</td>
                </tr>
                <tr>
                    <td> Дата окончания </td>
                    <td>@education.Date.ToString("dd/MM/yyyy")</td>
                </tr>
            }
        </tbody>
        <thead>
            <tr>
                <th colspan="2">Опыт работы</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var job in listJobs)
            {
                <tr>
                    <td> Должность </td>
                    <td>@job.Position</td>
                </tr>
                <tr>
                    <td> Организация </td>
                    <td>@job.Organization</td>
                </tr>
            }
        </tbody>
        <thead>
            <tr>
                <th colspan="2">Место жительства</th>
            </tr>
        </thead>
        <tbody>

            <tr>
                <td> Постоянная регистрация </td>
                <td>@address.AddressPermanentRegistration</td>
            </tr>
            @if (address.AddressTemporaryRegistration != null)
            {
                <tr>
                    <td> Временная регистрация </td>
                    <td>@address.AddressTemporaryRegistration</td>
                </tr>
            }
        </tbody>
        <thead>
            <tr>
                <th colspan="2">Документы</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var document in listDocuments)
            {
                <tr>
                    <td> Тип документа </td>
                    <td>@document.DocumentName</td>
                </tr>
                <tr>
                    <td> Номер документа </td>
                    <td>@document.DocumentNumber</td>
                </tr>
            }
        </tbody>
        @if (rusPassport.DocumentSeries != "")
        {
            <thead>
                <tr>
                    <th colspan="2">Паспорт гражданина РФ</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td> Серия   Номер </td>
                    <td>@rusPassport.DocumentSeries</td>
                </tr>
                <tr>
                    <td> Выдан </td>
                    <td>@rusPassport.DocumentIssuer</td>
                </tr>
                <tr>
                    <td> Код подразделения </td>
                    <td>@rusPassport.DocumentIssuerCode</td>
                </tr>
                <tr>
                    <td> Дата выдачи </td>
                    <td>@rusPassport.DocumentDate.ToString("dd/MM/yyyy")</td>
                </tr>
            </tbody>
        }
        @if (intPassport.DocumentSeries != "")
        {
            <thead>
                <tr>
                    <th colspan="2">Загранпаспорт</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td> Серия   Номер </td>
                    <td>@intPassport.DocumentSeries</td>
                </tr>
                <tr>
                    <td> Выдан </td>
                    <td>@intPassport.DocumentIssuer</td>
                </tr>
                <tr>
                    <td> Код подразделения </td>
                    <td>@intPassport.DocumentDateOfIssue.ToString("dd/MM/yyyy")</td>
                </tr>
                <tr>
                    <td> Дата выдачи </td>
                    <td>@intPassport.DocumentExpirationDate.ToString("dd/MM/yyyy")</td>
                </tr>
            </tbody>
        }
        @if (foreignPassport.DocumentCountry != "")
        {
            <thead>
                <tr>
                    <th colspan="2">Паспорт иностранного гражданина</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td> Серия   Номер </td>
                    <td>@foreignPassport.DocumentSeries</td>
                </tr>
                <tr>
                    <td> Выдан </td>
                    <td>@foreignPassport.DocumentCountry</td>
                </tr>
                <tr>
                    <td> Код подразделения </td>
                    <td>@foreignPassport.DocumentDate.ToString("dd/MM/yyyy")</td>
                </tr>
            </tbody>
        }
    </table>
</div>



@code {
    string message = "";

    Individual individual=new Individual();

    async Task submitAll()
    {
        info.Id = Guid.NewGuid();

        foreach (var education in listEducation)
        {
            education.Id = Guid.NewGuid();
        }
        foreach (var job in listJobs)
        {
            job.Id = Guid.NewGuid();
        }

        address.Id = Guid.NewGuid();

        if (listDocuments != null) foreach (var document in listDocuments)
            {
                document.Id = Guid.NewGuid();
            }
        rusPassport.Id = Guid.NewGuid();
        foreignPassport.Id = Guid.NewGuid();
        intPassport.Id = Guid.NewGuid();


        individual.Id = Guid.NewGuid();

        individual.InformationDto = info;
        individual.EducationsDtOs = listEducation;
        individual.JobsDtOs = listJobs;
        individual.PersonAddressDto = address;
        individual.DocumentsDtOs = listDocuments;
        individual.RussianPassportDto = rusPassport;
        individual.InternationalPassportDto = intPassport;
        individual.ForeignPassportDto = foreignPassport;

        await PostASJson(individual);
    }


    protected async Task PostASJson(Individual individual)
    {
        var response = await Http.PostAsJsonAsync("https://localhost:7279/api/Individual/", individual);
        if (response.IsSuccessStatusCode)
        {
            var newPerson = await response.Content.ReadFromJsonAsync<Individual>();
            if (newPerson != null) message = $"Создан объект Person с id = {newPerson.Id}";
        }
        else
        {
            var error = await response.Content.ReadFromJsonAsync<Error>();
            if (error != null) message = error.Details;
        }
    }

    class Error
    {
        public string Details { get; set; } = "";
    }

    void Submit2()
    {
        listEducation.Add(education);
    }

    void Submit3()
    {
        listJobs.Add(job);
    }

    void Submit5()
    {
        listDocuments.Add(document);
    }

    void AddEducation()
    {
        listEducation.Add(education);
        education = new EducationsDto();
        foreach (var education in listEducation)
        {
            message += education.Type;
        }
    }

    void AddJob()
    {
        listJobs.Add(job);
        job = new JobsDto();
        foreach (var job in listJobs)
        {
            message += job.Position;
        }
    }

    void AddDocument()
    {
        listDocuments.Add(document);
        document = new DocumentsDto();
        foreach (var document in listDocuments)
        {
            message += document.DocumentName;
        }
    }

    InformationDto info = new InformationDto();

    EducationsDto education = new EducationsDto();
    List<EducationsDto> listEducation = new List<EducationsDto>();

    JobsDto job = new JobsDto();
    List<JobsDto> listJobs = new List<JobsDto>();

    PersonAddressDto address = new PersonAddressDto();

    DocumentsDto document = new DocumentsDto();
    List<DocumentsDto> listDocuments = new List<DocumentsDto>();

    RussianPassportDto rusPassport = new RussianPassportDto();
    ForeignPassportDto foreignPassport = new ForeignPassportDto();
    InternationalPassportDto intPassport = new InternationalPassportDto();
}